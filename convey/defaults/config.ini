[CONVEY]
# If testing is True, don't be afraid, mails wont be sent. They'll get forwarded to the testing e-mail (and e-mails in Cc wont be sent at all)
testing = True

# If testing is True, all e-mails will be forwarded to this testingging e-mail.
testing_mail = example@example.com

# Development only: If debug is True, ipdb.set_trace() will get called in the case of an exception
debug = False

# Open GUI editor with mail templates when analysis starts.
autoopen_editor = False

# You may define custom fields. Providing paths to the entrypoint Python files.
# Methods in these files will be taken as the names for the custom fields.
# Delimit the paths by a comma, ex: `custom_fields_modules = /tmp/myfile.py, /tmp/anotherfile.py`
# /tmp/myfile.py may have the contents: `def hello_world(val): return "hello world"`
custom_fields_modules =

#
# Sometimes, we are provided with unvalid files that change the pattern in the middle.
# If True and invalid line exist, it is written to a special file.
# After Whois analysis, administrator may manually change the file contents and let the lines reanalyse.
# If False, the lines are just counted but not written to special file.
#
redo_invalids = True

# whois abbreviation for local country, other countries will be treated as "partners"
local_country = cz

# In the command line we specify a file name or input text (it file does not exist).
# If this parameter is omitted what should convey do?
# 0 or empty ~ ask what to do
# 1 ~ input from stdin
# 2 ~ choose file name
# 3 ~ input from stdin, then choose file name
# 4 ~ choose file name, then input from stdin
# 5 ~ allow only input text (unless flag --file present), even if parameter omitted
# 6 ~ allow only file name (unless flag --input present), even if parameter omitted
file_or_input = 1

# Filepath to local country team contacts. CSV file is in the format: domain,cc. (Mails can be delimited by semicolon.)
contacts_local = contacts_local.csv

# Filepath to foreign countries contacts. CSV file is in the format: country,abusemail
contacts_foreign = contacts_foreign.csv

# Template for basic e-mails.
mail_template_basic = mail_basic.txt

# Template for partner e-mails.
mail_template_partner = mail_partner.txt

# If you have a whois mirror server, put it in here. You may append a -r flag if this is a RIPE mirror.
# Ex: ripedb.nic.cz -r
whois_mirror =

# True if you want to write "statistics.txt" file next to the analyzed file, containing whois info, like:
# "Totally 17 of unique IPs; information for 5 countries (16 unique IPs), no contact for 1 countries without national/government CSIRT (1 unique IPs)"
write_statistics = False

# When processing input text (not a file on disk), should we save the output to a file?
# True ~ save
# False ~ do not save, just display
# left empty ~ always ask
save_stdin_output =

# Default CSV dialect parameters; you can force delimiter, quoting character and set True or False if file is considered having the header.
delimiter =
quote_char =
header =

[SMTP]
smtp_host = localhost
email_from = example@example.com
email_from_name = "My cool mail" <example@example.com>


[OTRS]
# OTRS specific options. We may send all the e-mails by it.
otrs_enabled = True
otrs_host = localhost
baseuri = /otrs/index.pl
signkeyid = PGP::Detached::12345678

# Default ticket records (for testing, may be left empty), it will be used during CSV processing.
# It's handier to define that with the use of cmd flags.
ticketid =
ticketnum =
